{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tailwind-mixin",
  "type": "registry:lib",
  "title": "Tailwind Mixin",
  "author": "Lloyd Richards <lloyd.d.richards@gmail.com>",
  "description": "A set of Tailwind CSS mixins for Lit components, enabling easy integration of Tailwind styles within web components.",
  "dependencies": [
    "tailwind-merge",
    "tw-animate-css",
    "class-variance-authority",
    "clsx"
  ],
  "files": [
    {
      "path": "registry/lib/tailwindMixin.ts",
      "content": "import { adoptStyles, type LitElement, unsafeCSS } from \"lit\";\nimport tailwindCss from \"@/styles/tailwind.global.css?inline\";\n\ndeclare global {\n  // biome-ignore lint/suspicious/noExplicitAny: Required for mixin pattern compatibility\n  export type LitMixin<T = unknown> = new (...args: any[]) => T & LitElement;\n}\n\nexport const tailwind = unsafeCSS(tailwindCss);\n\n// https://github.com/tailwindlabs/tailwindcss/issues/15005\n// Set all @property values from tailwind on the document\n// And only do this once (check if there is already a stylesheet with the same content)\nif (\n  tailwind.styleSheet &&\n  document?.adoptedStyleSheets &&\n  !document.adoptedStyleSheets.some(\n    (sheet) =>\n      sheet.cssRules[0]?.cssText === tailwind.styleSheet?.cssRules[0].cssText,\n  )\n) {\n  const propertiesSheet = new CSSStyleSheet();\n  let code = tailwind.cssText;\n  code = code\n    .replaceAll(\"inherits: false\", \"inherits: true\")\n    .substring(code.indexOf(\"@property\"));\n  propertiesSheet.replaceSync(code);\n  document.adoptedStyleSheets.push(propertiesSheet);\n}\n\nexport const TW = <T extends LitMixin>(superClass: T): T =>\n  class extends superClass {\n    connectedCallback() {\n      super.connectedCallback();\n      if (this.shadowRoot) adoptStyles(this.shadowRoot, [tailwind]);\n    }\n  };\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/lib/tailwindMixin.d.ts",
      "content": "import { type LitElement } from \"lit\";\ndeclare global {\n  export type LitMixin<T = unknown> = new (...args: any[]) => T & LitElement;\n}\nexport declare const TW: <T extends LitMixin>(superClass: T) => T;\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/lib/utils.ts",
      "content": "import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib"
    }
  ],
  "css": {
    "@import tailwindcss": {},
    "@import tw-animate-css": {},
    "@custom-variant dark (&:is(.dark *))": {},
    "@theme inline": {
      "--color-border: var(--_border)": {},
      "--color-input: var(--_input)": {},
      "--color-ring: var(--_ring)": {},
      "--color-background: var(--_background)": {},
      "--color-foreground: var(--_foreground)": {},
      "--color-card: var(--_card)": {},
      "--color-card-foreground: var(--_card-foreground)": {},
      "--color-popover: var(--_popover)": {},
      "--color-popover-foreground: var(--_popover-foreground)": {},
      "--color-primary: var(--_primary)": {},
      "--color-primary-foreground: var(--_primary-foreground)": {},
      "--color-secondary: var(--_secondary)": {},
      "--color-secondary-foreground: var(--_secondary-foreground)": {},
      "--color-muted: var(--_muted)": {},
      "--color-muted-foreground: var(--_muted-foreground)": {},
      "--color-accent: var(--_accent)": {},
      "--color-accent-foreground: var(--_accent-foreground)": {},
      "--color-destructive: var(--_destructive)": {},
      "--color-destructive-foreground: var(--_destructive-foreground)": {}
    },
    "@layer base": {
      ":root,:host": {
        "--_background: var(--background, oklch(1 0 0))": {},
        "--_foreground: var(--foreground, oklch(0.147 0.004 49.25))": {},
        "--_card: var(--card, oklch(1 0 0))": {},
        "--_card-foreground: var(--card-foreground, oklch(0.147 0.004 49.25))": {},
        "--_popover: var(--popover, oklch(1 0 0))": {},
        "--_popover-foreground: var(--popover-foreground, oklch(0.147 0.004 49.25))": {},
        "--_primary: var(--primary, oklch(0.216 0.006 56.043))": {},
        "--_primary-foreground: var(--primary-foreground, oklch(0.985 0.001 106.423))": {},
        "--_secondary: var(--secondary, oklch(0.97 0.001 106.424))": {},
        "--_secondary-foreground: var(--secondary-foreground, oklch(0.216 0.006 56.043))": {},
        "--_muted: var(--muted, oklch(0.97 0.001 106.424))": {},
        "--_muted-foreground: var(--muted-foreground, oklch(0.553 0.013 58.071))": {},
        "--_accent: var(--accent, oklch(0.97 0.001 106.424))": {},
        "--_accent-foreground: var(--accent-foreground, oklch(0.216 0.006 56.043))": {},
        "--_destructive: var(--destructive, oklch(0.577 0.245 27.325))": {},
        "--_destructive-foreground: var(--destructive-foreground, oklch(0.985 0.001 106.423))": {},
        "--_border: var(--border, oklch(0.923 0.003 48.717))": {},
        "--_input: var(--input, oklch(0.923 0.003 48.717))": {},
        "--_ring: var(--ring, oklch(0.709 0.01 56.259))": {},
        "--_radius: var(--radius, 0.5rem)": {}
      },
      ".dark,:host(.dark),:host-context(.dark)": {
        "--_background: var(--background, oklch(0.147 0.004 49.25))": {},
        "--_foreground: var(--foreground, oklch(0.985 0.001 106.423))": {},
        "--_card: var(--card, oklch(0.216 0.006 56.043))": {},
        "--_card-foreground: var(--card-foreground, oklch(0.985 0.001 106.423))": {},
        "--_popover: var(--popover, oklch(0.216 0.006 56.043))": {},
        "--_popover-foreground: var(--popover-foreground, oklch(0.985 0.001 106.423))": {},
        "--_primary: var(--primary, oklch(0.923 0.003 48.717))": {},
        "--_primary-foreground: var(--primary-foreground, oklch(0.216 0.006 56.043))": {},
        "--_secondary: var(--secondary, oklch(0.268 0.007 34.298))": {},
        "--_secondary-foreground: var(--secondary-foreground, oklch(0.985 0.001 106.423))": {},
        "--_muted: var(--muted, oklch(0.268 0.007 34.298))": {},
        "--_muted-foreground: var(--muted-foreground, oklch(0.709 0.01 56.259))": {},
        "--_accent: var(--accent, oklch(0.268 0.007 34.298))": {},
        "--_accent-foreground: var(--accent-foreground, oklch(0.985 0.001 106.423))": {},
        "--_destructive: var(--destructive, oklch(0.704 0.191 22.216))": {},
        "--_destructive-foreground: var(--destructive-foreground, oklch(0.985 0.001 106.423))": {},
        "--_border: var(--border, oklch(1 0 0 / 10%))": {},
        "--_input: var(--input, oklch(1 0 0 / 15%))": {},
        "--_ring: var(--ring, oklch(0.553 0.013 58.071))": {}
      }
    },
    "@layer root": {
      " *": {
        "@apply border-border outline-ring/50": {}
      },
      "body": {
        "@apply bg-background text-foreground": {}
      }
    }
  },
  "categories": [
    "ui",
    "web-component"
  ]
}